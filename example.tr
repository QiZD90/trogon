# yeah, this file is here to check if anything breaks when adding new features

# ===========================
#          Factorial
# ===========================
print('Factorial of 10:');
function factr(n) {
	# blocks are expressions and return the resulf of the last expression in them
	# functions work the same way
	if n <= 1 { 1 } else { n * factr(n - 1) }
}
print(factr(10));


# ===========================
#          FizzBuzz
# ===========================
print('\nFizzBuzz:');
for let i in 1 .. 20 {
	let fizzbuzz =
		(if i % 3 == 0 { 'Fizz' } else { '' }) + (if i % 5 == 0 { 'Buzz' } else { '' });

	if fizzbuzz {
		print(fizzbuzz);
	} else {
		print(i);
	}
}


# ============================
#      Reverse a string
# ============================
print('\nString reverse...');
print('Input a string:');
let str = input();
let reverse = '';
for let i in str.length() - 1 .. (-1) {
	reverse = reverse + str[i];
}
print(reverse);


# ============================
#         Table test
# ============================
function new_cat() {
	let cat = table {
		'say': function() { print('meow'); },
		'breed': 'Siamese cat',
		'age': 6
	};
	
	cat
}

function new_dog() {
	let dog = table {
		'say': function() { print('woof'); },
		'breed': 'Labrador',
		'age': 4, # Trailing comma <3
	};

	dog
}

print('Choose an animal (cat/dog): ');
let choice = input();

while choice != 'cat' and choice != 'dog' {
	print('Choose an animal (cat/dog): ');
	choice = input();
}

let animal;
if choice == 'cat' {
	print('New cat is being produced on the cat factory!!');
	animal = new_cat();
} else {
	print('New dog is being produced on the dog factory!!');
	animal = new_dog();
}

print(animal['breed'] + ' aged ' + animal['age'] as string + ' says:');
animal['say']();


# ============================
#      Cellular automata
# ============================
print('\n1D cellular automata:');

function get_next_state(a, b, c) {
	if (a == 'X' and b == ' ' and c == 'X') or
	   (a == ' ' and b == 'X' and c == 'X') or
	   (a == 'X' and b == 'X' and c == ' ') {
	   'X'
	} else {
		' '
	}
}

let state = ' XXX XX X X X X  X  ';
while (true) {
	print('|' + state + '|');

	let next_state = '                    ';
	print(next_state);
	for let i in 0 .. 20 {
		next_state[i] = get_next_state(
			if i > 0 { state[i - 1] } else { ' ' },
			state[i],
			if i < 19 { state[i + 1] } else { ' ' }
		);
	}
	state = next_state;

	input();
}